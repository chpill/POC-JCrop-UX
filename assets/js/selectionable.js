// Generated by CoffeeScript 1.6.2
(function() {
  var Group, Picture, PictureView, Selectionable, _ref, _ref1, _ref2, _ref3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      this.render = __bind(this.render, this);      _ref = Group.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Group.prototype.initialize = function() {
      return this.list = [];
    };

    Group.prototype.add = function(select) {
      this.list.push(select);
      return this;
    };

    Group.prototype.render = function() {
      var select, _i, _len, _ref1;

      this.$el.css({
        width: this.options.size.width + 'px',
        height: this.options.size.height + 'px',
        border: 'solid'
      });
      _ref1 = this.list;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        select = _ref1[_i];
        this.$el.append(select.render().el);
      }
      return this;
    };

    return Group;

  })(Backbone.View);

  Selectionable = (function(_super) {
    __extends(Selectionable, _super);

    function Selectionable() {
      this.onRelease = __bind(this.onRelease, this);
      this.onSelect = __bind(this.onSelect, this);
      this.onChange = __bind(this.onChange, this);
      this.select = __bind(this.select, this);      _ref1 = Selectionable.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Selectionable.prototype.initialize = function() {
      this.$el = $('<div></div>');
      return this.el = this.$el[0];
    };

    Selectionable.prototype.events = {
      click: 'select'
    };

    Selectionable.prototype.select = function(event) {
      var self;

      self = this;
      this.$content.Jcrop({
        onChange: this.onChange,
        onSelect: this.onSelect,
        onRelease: this.onRelease
      }, function() {
        return self.setCrop(this);
      });
      return this;
    };

    Selectionable.prototype.setCrop = function(_crop) {
      this._crop = _crop;
      return this._crop.setSelect([0, 0, this.model.get('width'), this.model.get('height')]);
    };

    Selectionable.prototype.render = function() {
      this.$el.css({
        position: 'relative',
        top: this.model.get('pos').x,
        left: this.model.get('pos').y
      });
      this.$content.attr({
        width: "" + (this.model.get('width')) + "px",
        height: "" + (this.model.get('height')) + "px"
      });
      this.$el.append(this.$content);
      return this;
    };

    Selectionable.prototype.onChange = function(coords) {
      return this.trigger('change', coords);
    };

    Selectionable.prototype.onSelect = function(coords) {
      return this.trigger('select', coords);
    };

    Selectionable.prototype.onRelease = function(coords) {
      return this.trigger('release', coords);
    };

    return Selectionable;

  })(Backbone.View);

  PictureView = (function(_super) {
    __extends(PictureView, _super);

    function PictureView() {
      _ref2 = PictureView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    PictureView.prototype.render = function() {
      this.$canvas = $('<canvas></canvas>');
      this.canvas = new Canvas(this.$canvas[0]);
      this.$content = this.$canvas;
      _.delay(this.canvas.draw);
      return PictureView.__super__.render.call(this);
    };

    return PictureView;

  })(Selectionable);

  Picture = (function(_super) {
    __extends(Picture, _super);

    function Picture() {
      _ref3 = Picture.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return Picture;

  })(Backbone.Model);

  this.Group = Group;

  this.PictureView = PictureView;

  this.Picture = Picture;

}).call(this);
